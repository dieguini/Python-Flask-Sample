name: Python sample application flask 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "dev", "qa" ]

permissions:
  contents: read

jobs:
  tests:
    if: false # Skipp job when needed 
    runs-on: ubuntu-latest
    steps:
    # Step 1: obtain repo from GitHub
    - 
      name: Checkout Code
      uses: actions/checkout@v3
    # Step 2: activate virtual env
    - 
      name: Activate venv
      run: |
        chmod +x ./myvenv/Scripts/activate
        ./myvenv/Scripts/activate
    # Step 3: dependencies
    - 
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    # Step 4: run linter
    - 
      name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --exclude=myvenv* --count --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --exclude=myvenv* --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # Step 5: tests
    - 
      name: Test with pytest
      run: |
        python -m pytest -v --cov=.

  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: ${{ vars.DOCKER_HUB_NS }}
      GHCR_REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    # needs: tests
    permissions:
      contents: read
      packages: write
    steps:
      # Step 1: obtain repo from GitHub
      - 
        name: Checkout Code
        uses: actions/checkout@v3
      # Step 2: Buildx improve
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Step 3: Log to registries
      # Step 3.1: Log to ghcr
      - 
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Step 3.2: Log to ghcr
      - 
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          # username: ${{ github.actor }}
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Step 4: Metadata for image name
      # Step 4.1: Docker Metadata
      - 
        name: Docker metadata (tags, labels)
        id: meta-docker
        uses: docker/metadata-action@v4
        with:
          # images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # dynamically set the branch name and sha as a custom tag
            type=raw,value={{ base_ref }}
      # Step 4.2: GHCR Metadata
      - 
        name: Docker metadata (tags, labels)
        id: meta-ghcr
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # dynamically set the branch name and sha as a custom tag
            type=raw,value={{ base_ref }}
      # Step 5: Build and push
      - 
        name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          # tags: ${{ steps.meta.outputs.tags }}
          # labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ steps.meta-docker.outputs.tags }}
            ${{ steps.meta-ghcr.outputs.tags }}
